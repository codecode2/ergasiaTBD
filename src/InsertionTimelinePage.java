
 
 
 
import java.sql.Statement;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
 
import java.sql.CallableStatement;
import java.sql.Types;
import javax.swing.JOptionPane;
import javax.swing.*; 
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Chameleon
 */
public class InsertionTimelinePage extends javax.swing.JFrame {

     static String driverClassName="oracle.jdbc.OracleDriver";
    static String url = "jdbc:oracle:thin:@192.168.6.21:1521/dblabs";
    static Connection dbConnection = null;
     static Connection dbConnection2 = null;
      static Connection dbConnection3 = null;
    static String username = "it175093";
    static String passwd = "Powerteam1515";
    static Statement statement =null; 
    static Statement statement2 =null;
    static PreparedStatement  insertList =null;
    static ResultSet rs   = null;
    static ResultSet rs2 = null;
     String changer[]=new String [30];
    
    
     
    public InsertionTimelinePage() {
        
        
        initComponents();
         centreWindow(this);
         myconnection();
         mylist();
         
    }
    
  
    
    
    
    
    
    void myconnection()
      {
         try{
             Class.forName(driverClassName);
                
         } catch(ClassNotFoundException ex) {}
         
         try{
                    
                     dbConnection= DriverManager.getConnection(url,username,passwd);  
                     statement = dbConnection.createStatement();
                     String selectString ="select moviename from movie";
                     rs=statement.executeQuery(selectString);
                       DefaultListModel mylist =new DefaultListModel();
                     while(rs.next())
                     {
                     String moviename = rs.getString("moviename"); 
                      mylist.addElement(moviename);                                          
                     }
                     
                      movie1.setModel(mylist);
                      
                      statement.close();
                      dbConnection.close();
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         
         }
         
         
         
         
         
         
   }
    
    
     
    
      void mylist()
     {
     
         int i =0;
         String SelectionString = "SELECT TM FROM BILLINGS";
         try 
         {
             dbConnection2= DriverManager.getConnection(url,username,passwd);  
             statement2 = dbConnection2.createStatement();
             rs2= statement2.executeQuery(SelectionString);
             while(rs2.next())
             {
                  changer[i]=rs2.getString("TM");
                  i++;
             }
             
             statement2.close();
             dbConnection2.close();
         } 
            
         catch(SQLException ex)
          {
              while(ex !=null)
              {
                  System.out.println("Message: "+ex.getMessage());
                  ex=ex.getNextException();
              }   
          }
         
         day.addItem("");
         day.addItem("Monday");
         day.addItem("Tuesday");
         day.addItem("Wednesday");
         day.addItem("Thursday");
         day.addItem("Friday");
         day.addItem("Saturday");
         day.addItem("Sunday");
         time1.addItem("");
         for(int y=0;y<i;y++)
            {
             time1.addItem(changer[y]);
            }
          
       
          
        }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BackToMenu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        movie1 = new javax.swing.JList<>();
        day = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        time1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(158, 195, 208));
        jPanel1.setFocusCycleRoot(true);

        BackToMenu.setText("Main Menu");
        BackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuActionPerformed(evt);
            }
        });

        movie1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(movie1);

        day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        jLabel1.setText("Check Price");

        time1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Price");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Check if is it available");

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose a movie");

        jLabel4.setText("Day ");

        jLabel5.setText("Time");

        jButton3.setText("Movies inserted by");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(284, 284, 284))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(66, 66, 66)
                                        .addComponent(jLabel2)))
                                .addGap(110, 110, 110))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(time1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel5)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 72, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(time1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(81, 81, 81)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuActionPerformed
                this.hide();
                MainMenu StartPage = new MainMenu();
                StartPage.setVisible(true);
                
    }//GEN-LAST:event_BackToMenuActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
            boolean wrong=true;
        
            String movie= movie1.getSelectedValue();
           String movienull = String.valueOf(movie1.getSelectedValue());
            String time =String.valueOf(time1.getSelectedItem());
            String day1 = String.valueOf(day.getSelectedItem());
               
        
        
        if (  time.equals("")||day1.equals("") || movienull.equals("null"))
        
        {
                                  
            JOptionPane.showMessageDialog(jPanel1, "Make an option");
 
        }else
            
          { try{     
              
              
              dbConnection3= DriverManager.getConnection(url,username,passwd);
              CallableStatement  insertSchedule= dbConnection3.prepareCall("{call  insertSchedule(?,?,?)}");                               
              CallableStatement  takemovietime= dbConnection3.prepareCall("{call  givetime(?,?)}");                
              takemovietime.setString(1, movienull);
              takemovietime.registerOutParameter(2,Types.VARCHAR);               
              takemovietime.executeUpdate();
              String duration = takemovietime.getString(2);
              int dur=  Integer.valueOf(duration.substring(0, 1));
              int timechanger = Integer.valueOf(time); 
              insertSchedule.setString(1,day1);
              insertSchedule.setString(2,time);
              insertSchedule.setString(3,movienull); 
              insertSchedule.executeUpdate();
                 if (dur>0)
                 {
                    if(timechanger ==24){                
                    timechanger=0;
                
                 }  
                     
                 timechanger++;
                 time = String.valueOf(timechanger);
                insertSchedule.setString(1,day1);
                insertSchedule.setString(2,time);
                insertSchedule.setString(3,movienull);
                insertSchedule.executeUpdate();
                 }                  
                 if (dur>1)
                 {
                 if(timechanger ==24){
                
                    timechanger=0;
                
                 }  
                     
                    timechanger++;
                    time = String.valueOf(timechanger);
                insertSchedule.setString(1,day1);
                insertSchedule.setString(2,time);
                insertSchedule.setString(3,movienull);
                insertSchedule.executeUpdate();
                 
                 }
                  if (dur>2)
                 {
                 if(timechanger ==24)
                 {
                
                    timechanger=0;
                
                 }  
                     
                    timechanger++;
                    time = String.valueOf(timechanger);
                 insertSchedule.setString(1,day1);
                insertSchedule.setString(2,time);
                 insertSchedule.setString(3,movienull);
                   insertSchedule.executeUpdate();
                 
                 }  
                  if (dur>3)
                 {
                 if(timechanger ==24){
                
                    timechanger=0;
                
                 }  
                     
                    timechanger++;
                    time = String.valueOf(timechanger);
                 insertSchedule.setString(1,day1);
                insertSchedule.setString(2,time);
                 insertSchedule.setString(3,movienull);
                   insertSchedule.executeUpdate();
                 
                 }
                 
                 
                  insertSchedule.close();
                dbConnection3.close();
                  
           }catch(SQLException ex)
             {
                 
                 while(ex != null){
                 System.out.println("\n -- SQL Exception -- \n" + ex.getMessage());
                 ex=ex.getNextException();
                 wrong= false;
             
              }
           }
        if (wrong==false)
        {
           JOptionPane.showMessageDialog(jPanel1, "Something go Wrong. Try again please");
        }else 
            
        {
            
             popupInsertMovie   popup = new popupInsertMovie();
             this.hide();
             popup.show();
        }

       }
    
    }//GEN-LAST:event_submitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
         int open=0 ;        
         String movie= movie1.getSelectedValue();
         String movienull = String.valueOf(movie1.getSelectedValue());
         String time =String.valueOf(time1.getSelectedItem());
         String day1 = String.valueOf(day.getSelectedItem());
               
        if (  time.equals("")||day1.equals("") || movienull.equals("null"))
        {                                 
            JOptionPane.showMessageDialog(jPanel1, "Make an option");
        }else
            
            { try
                {     
                  dbConnection3= DriverManager.getConnection(url,username,passwd);
                   CallableStatement  available= dbConnection3.prepareCall("{call available(?,?,?)}"); 
                   available.setString(1,day1);
                   available.setString(2,time);
                   available.registerOutParameter(3, Types.INTEGER);
                   available.executeUpdate();
                   open = available.getInt(3);
                   available.close();
                   dbConnection3.close();

                   }catch(SQLException ex)
                 {

                     while(ex != null){
                     System.out.println("\n -- SQL Exception -- \n" + ex.getMessage());
                     ex=ex.getNextException();


                  }
                    }
                 if (open==1)
                 {
                                  JOptionPane.showMessageDialog(jPanel1, "This date it's not available");


                 }else 

                 {
                     JOptionPane.showMessageDialog(jPanel1, "This date it's available");

                 }

            }
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int pricing=0 ;
        
            String movie= movie1.getSelectedValue();
           String movienull = String.valueOf(movie1.getSelectedValue());
            String time =String.valueOf(time1.getSelectedItem());
            String day1 = String.valueOf(day.getSelectedItem());
               
        
        
        if (  time.equals("")||day1.equals("") || movienull.equals("null"))
        
        {
                                  
            JOptionPane.showMessageDialog(jPanel1, "Make an option");
 
        }else
            
          { try{     
              dbConnection3= DriverManager.getConnection(url,username,passwd);
               CallableStatement  price= dbConnection3.prepareCall("{call price(?,?)}"); 
                price.setString(1,time);
                price.registerOutParameter(2, Types.INTEGER);  
                price.executeUpdate();                 
                pricing = price.getInt(2);                  
                price.close();
                dbConnection3.close();
                  
           }catch(SQLException ex)
             {
                 
                 while(ex != null){
                 System.out.println("\n -- SQL Exception -- \n" + ex.getMessage());
                 ex=ex.getNextException();
                 
             
              }
           }
        
            JOptionPane.showMessageDialog(jPanel1, "The price for this date is  "+  pricing +"€");
        
        

       }
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         companyCustomerMovies dep = new companyCustomerMovies();
         dep.show();
         this.hide();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewCustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewCustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewCustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewCustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new NewCustomerMenu().setVisible(true);
            }
        });
    }
 public static void centreWindow(Window frame) {
         Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();  
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
        } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMenu;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> movie1;
    private javax.swing.JButton submit;
    private javax.swing.JComboBox<String> time1;
    // End of variables declaration//GEN-END:variables
}
