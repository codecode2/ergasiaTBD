
import java.awt.Button;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.*;
/**
 *
 * @author Chameleon
 */
public class EditPage extends javax.swing.JFrame {


     static String driverClassName="oracle.jdbc.OracleDriver";
    static String url = "jdbc:oracle:thin:@192.168.6.21:1521/dblabs";
    static Connection dbConnection = null;
     static Connection dbConnection2 = null;
    static String username = "it175093";
    static String passwd = "Powerteam1515";
    static Statement statement =null; 
    static Statement statement2 =null;
    static Statement statement3 =null;
    static PreparedStatement  insertonList =null;
    static ResultSet rs   = null;
    static ResultSet rs2   = null;
    static String classname1;
    static PreparedStatement insertValues = null;
    public static String SetValueForText1="to eftiaksa";
    public static String SetValueForText2="to ekana re morti";
   
    public EditPage() {
        
        
        initComponents();
        
         centreWindow(this);
         myconnection();
    }

     void myconnection()
      {
         try{
             Class.forName(driverClassName);
                
         } catch(ClassNotFoundException ex) {}
         
         try{   
                         
                     dbConnection= DriverManager.getConnection(url,username,passwd);  
                     statement = dbConnection.createStatement();
                      
                      statement.close();
                      dbConnection.close();
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }
         
         
         
         
         
         
   }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BackToMenu = new javax.swing.JButton();
        tableOptions = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listofOptions = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 218, 200));
        jPanel1.setFocusCycleRoot(true);

        BackToMenu.setText("Main Menu");
        BackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuActionPerformed(evt);
            }
        });

        tableOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "" ,"Customer", "Company", "Movie","Scheduled","Billings"}));
        tableOptions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tableOptionsItemStateChanged(evt);
            }
        });

        listofOptions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listofOptions);

        jLabel1.setText("Choose an option");

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(BackToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(tableOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(87, 87, 87)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(BackToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuActionPerformed
                this.hide();
                MainMenu StartPage = new MainMenu();
                StartPage.setVisible(true);
                
    }//GEN-LAST:event_BackToMenuActionPerformed


    
    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
           
                 
        String tableSelection1 = String.valueOf(tableOptions.getSelectedItem());
        String tableSelection2 = String.valueOf( listofOptions.getSelectedValue());
            
           boolean s=false;
             
             if (tableSelection2.equals("null"))
             {
                 s=true;
             
             }
            if(tableSelection1.equals("") || (s) )
            { 
                
                makeChangesNoChoises nodata = new makeChangesNoChoises();
                nodata.show();
                this.hide();
                
              
            }
            else if(tableSelection1.equals("Customer")  )
            {
                 String parts[] = tableSelection2.split(" ");
         try{
             dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
             
             int x=Integer.parseInt(parts[0]);
              
             String SelectString="{  call InsertionRestoring(?,?)}";
             insertValues= dbConnection.prepareStatement(SelectString); 
             insertValues.setInt(1,x);
             insertValues.setString(2, tableSelection1);
             insertValues.executeUpdate();
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }  
        
         
          
                 makeChangesCustomer makechange =  new makeChangesCustomer ();
                 makechange.show();
                 this.hide();
            }else if(tableSelection1.equals("Company")  )
            {
                String parts[] = tableSelection2.split(" ");
         try{
             dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
             
             int x=Integer.parseInt(parts[0]); 
             String SelectString="{  call InsertionRestoring(?,?)}";
             insertValues= dbConnection.prepareStatement(SelectString);  
             insertValues.setInt(1,x); 
             insertValues.setString(2, tableSelection1);
             insertValues.executeUpdate();
                
              
           
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }  
        
         
        
                makeChangeCompany makechange2 = new makeChangeCompany();
                makechange2.show();
                this.hide();
            
            } else if(tableSelection1.equals("Movie")  )
            {
                String parts[] = tableSelection2.split(" ");
         try{
              dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
             
              int x=Integer.parseInt(parts[0]);
              
             String SelectString="{  call InsertionRestoring(?,?)}";         
               insertValues= dbConnection.prepareStatement(SelectString);
               insertValues.setInt(1,x);
               insertValues.setString(2, tableSelection1);
               insertValues.executeUpdate();
                
              
           
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }  
       
                makeChangesMovie makechange3 = new makeChangesMovie();
                makechange3.show();
                this.hide();
            
            } else if(tableSelection1.equals("Scheduled")   )
            {
                String parts[] = tableSelection2.split(" ");
         try{
              dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
              int x=Integer.parseInt(parts[0]);
             String SelectString="{  call InsertionRestoring(?,?)}";
               insertValues= dbConnection.prepareStatement(SelectString);
               insertValues.setInt(1,x); 
               insertValues.setString(2, tableSelection1);
               insertValues.executeUpdate();
                
              
           
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }  

                makeChangesScheduled makechange4 = new makeChangesScheduled();
                makechange4.show();
                this.hide();
            
            } 
            else if(tableSelection1.equals("Billings")  )
            {
               String parts[] = tableSelection2.split(" ");
         try{
             dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
             int x=Integer.parseInt(parts[0]); 
             String SelectString="{  call InsertionRestoring(?,?)}";
             insertValues= dbConnection.prepareStatement(SelectString);
             insertValues.setInt(1,x);
             insertValues.setString(2, tableSelection1);
             insertValues.executeUpdate();
                
              
           
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }  
             
                makeChangesBillings makechange5 = new makeChangesBillings();
                makechange5.show();
                this.hide();
               
            
            } 
              
       
    }//GEN-LAST:event_editActionPerformed

    private void tableOptionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tableOptionsItemStateChanged
     
           DefaultListModel mylist =new DefaultListModel();
            String tableSelection = String.valueOf(tableOptions.getSelectedItem());
             delete.setVisible(true);
         
         try{
                    if (tableSelection.equals(""))
                                   
                       {
                          tableSelection="empty";
                          mylist.clear();
                           
                           
                        }             
                     dbConnection= DriverManager.getConnection(url,username,passwd);  
                     statement = dbConnection.createStatement();
                   
                     String selectString ="select * from "+tableSelection;                                    
                     rs=statement.executeQuery(selectString);     
                      if (tableSelection.equals("Company"))
                       {
                        while(rs.next())
                           {
                           int getid = rs.getInt("id2");
                           String coname = rs.getString("CONAME");
                           String mail = rs.getString("COMAIL");
                           String phone = rs.getString("COPHONE");
                           String location = rs.getString("LOCATION");
                            mylist.addElement(getid+" "+coname+" "+mail+" "+phone+" "+location); 
                           
                           }
                       } 
                        else if (tableSelection.equals("Billings"))
                       {
                        while(rs.next())
                           {
                           String time1 = rs.getString("TM");
                           int price = rs.getInt("PRICE");                          
                            mylist.addElement(time1+" "+price); 
                              delete.setVisible(false);
                           }
                        
                       }else if (tableSelection.equals("Customer"))
                       {
                        while(rs.next())
                           {
                           int getid = rs.getInt("id1");
                           String firstname = rs.getString("firstname");
                           String lastname = rs.getString("lastname");
                           String email = rs.getString("email");
                           String phone = rs.getString("phone");
                           String company = rs.getString("Company");
                            mylist.addElement(getid+" "+firstname+" "+lastname+" "+phone+" "+company);                                          
                           }
                        
                       }
                       else if (tableSelection.equals("Movie"))
                       {
                        while(rs.next())
                           {
                           int getid = rs.getInt("id3");
                           String moviename = rs.getString("moviename");
                           String kindmovie = rs.getString("kindmovie");
                           String producer = rs.getString("producer");
                           String duration = rs.getString("duration");
                           
                            mylist.addElement(getid+" "+moviename+" "+kindmovie+" "+producer+" "+duration);                                          
                           }
                         
                       }else if (tableSelection.equals("Scheduled"))
                       {
                        while(rs.next())
                           {
                           int getid = rs.getInt("sid2");
                           String day2 = rs.getString("day2");
                           String timezone2 = rs.getString("timezone2");
                           String movie2 = rs.getString("movie2");                                                      
                           mylist.addElement(getid+" "+day2+" "+timezone2+" "+movie2);                                          
                           }                         
                       }                    
                      listofOptions.setModel(mylist);
                      statement.close();
                      dbConnection.close();
                 
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }
         
    
         
                     
                                        
    }//GEN-LAST:event_tableOptionsItemStateChanged

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String tableSelection1 = String.valueOf(tableOptions.getSelectedItem());  
        String tableSelection2 = String.valueOf( listofOptions.getSelectedValue());
          if (tableSelection2.equals("null"))
          {
              
             JOptionPane.showMessageDialog(jPanel1, "There are no choises.Please make an option");
             
              
          } else 
          {  int a = JOptionPane.showConfirmDialog(jPanel1,"Do you want to continue?" );
                    
                if(a==JOptionPane.YES_OPTION)
                {
                     String parts[] = tableSelection2.split(" ");
                     
           try{
              dbConnection= DriverManager.getConnection(url,username,passwd);  
             statement = dbConnection.createStatement();
             
              int x=Integer.parseInt(parts[0]);
              
             String SelectString="{  call DELETION(?,?)}";
               insertValues= dbConnection.prepareStatement(SelectString);
               insertValues.setInt(1,x);              
               insertValues.setString(2, tableSelection1);             
               insertValues.executeUpdate();                     
               
         } catch(SQLException ex) 
         {
            System.out.print("\n -- SQL Exception -- \n" + ex.getMessage());
            ex=ex.getNextException();         
         }
         
                   JOptionPane.showMessageDialog(jPanel1, "Deletion was done");
                     tableOptions.setSelectedItem("");
                }    
            
          }
        
        
        
        
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

 
 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new NewCustomerMenu().setVisible(true);
            }
        });
    }
 public static void centreWindow(Window frame) {
         Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();  
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
        } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMenu;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listofOptions;
    private javax.swing.JComboBox<String> tableOptions;
    // End of variables declaration//GEN-END:variables

   
     

}
